<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.distribution.dao.dividend.mapper.DividendMapper" >
  <resultMap id="BaseResultMap" type="com.distribution.dao.dividend.model.Dividend" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="order_no" property="orderNo" jdbcType="BIGINT" />
    <result column="order_amount" property="orderAmount" jdbcType="DECIMAL" />
    <result column="dividend_count" property="dividendCount" jdbcType="INTEGER" />
    <result column="received_amount" property="receivedAmount" jdbcType="DECIMAL" />
    <result column="remain_amount" property="remainAmount" jdbcType="DECIMAL" />
    <result column="dividend_limit" property="dividendLimit" jdbcType="DECIMAL" />
    <result column="dividend_status" property="dividendStatus" jdbcType="VARCHAR" />
    <result column="mgmt_fee" property="mgmtFee" jdbcType="DECIMAL" />
    <result column="create_id" property="createId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_id" property="updateId" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, member_id, order_id, order_no, order_amount, dividend_count, received_amount, 
    remain_amount, dividend_limit, dividend_status, mgmt_fee, create_id, create_time, 
    update_id, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.distribution.dao.dividend.model.DividendExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from dividend
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from dividend
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from dividend
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.distribution.dao.dividend.model.DividendExample" >
    delete from dividend
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.distribution.dao.dividend.model.Dividend" >
    insert into dividend (id, member_id, order_id, 
      order_no, order_amount, dividend_count, 
      received_amount, remain_amount, dividend_limit, 
      dividend_status, mgmt_fee, create_id, 
      create_time, update_id, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{memberId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, 
      #{orderNo,jdbcType=BIGINT}, #{orderAmount,jdbcType=DECIMAL}, #{dividendCount,jdbcType=INTEGER}, 
      #{receivedAmount,jdbcType=DECIMAL}, #{remainAmount,jdbcType=DECIMAL}, #{dividendLimit,jdbcType=DECIMAL}, 
      #{dividendStatus,jdbcType=VARCHAR}, #{mgmtFee,jdbcType=DECIMAL}, #{createId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateId,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.distribution.dao.dividend.model.Dividend" >
    insert into dividend
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="memberId != null" >
        member_id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="orderAmount != null" >
        order_amount,
      </if>
      <if test="dividendCount != null" >
        dividend_count,
      </if>
      <if test="receivedAmount != null" >
        received_amount,
      </if>
      <if test="remainAmount != null" >
        remain_amount,
      </if>
      <if test="dividendLimit != null" >
        dividend_limit,
      </if>
      <if test="dividendStatus != null" >
        dividend_status,
      </if>
      <if test="mgmtFee != null" >
        mgmt_fee,
      </if>
      <if test="createId != null" >
        create_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateId != null" >
        update_id,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null" >
        #{orderNo,jdbcType=BIGINT},
      </if>
      <if test="orderAmount != null" >
        #{orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="dividendCount != null" >
        #{dividendCount,jdbcType=INTEGER},
      </if>
      <if test="receivedAmount != null" >
        #{receivedAmount,jdbcType=DECIMAL},
      </if>
      <if test="remainAmount != null" >
        #{remainAmount,jdbcType=DECIMAL},
      </if>
      <if test="dividendLimit != null" >
        #{dividendLimit,jdbcType=DECIMAL},
      </if>
      <if test="dividendStatus != null" >
        #{dividendStatus,jdbcType=VARCHAR},
      </if>
      <if test="mgmtFee != null" >
        #{mgmtFee,jdbcType=DECIMAL},
      </if>
      <if test="createId != null" >
        #{createId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateId != null" >
        #{updateId,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.distribution.dao.dividend.model.DividendExample" resultType="java.lang.Integer" >
    select count(*) from dividend
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update dividend
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.memberId != null" >
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null" >
        order_no = #{record.orderNo,jdbcType=BIGINT},
      </if>
      <if test="record.orderAmount != null" >
        order_amount = #{record.orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.dividendCount != null" >
        dividend_count = #{record.dividendCount,jdbcType=INTEGER},
      </if>
      <if test="record.receivedAmount != null" >
        received_amount = #{record.receivedAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.remainAmount != null" >
        remain_amount = #{record.remainAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.dividendLimit != null" >
        dividend_limit = #{record.dividendLimit,jdbcType=DECIMAL},
      </if>
      <if test="record.dividendStatus != null" >
        dividend_status = #{record.dividendStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.mgmtFee != null" >
        mgmt_fee = #{record.mgmtFee,jdbcType=DECIMAL},
      </if>
      <if test="record.createId != null" >
        create_id = #{record.createId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateId != null" >
        update_id = #{record.updateId,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update dividend
    set id = #{record.id,jdbcType=INTEGER},
      member_id = #{record.memberId,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=BIGINT},
      order_amount = #{record.orderAmount,jdbcType=DECIMAL},
      dividend_count = #{record.dividendCount,jdbcType=INTEGER},
      received_amount = #{record.receivedAmount,jdbcType=DECIMAL},
      remain_amount = #{record.remainAmount,jdbcType=DECIMAL},
      dividend_limit = #{record.dividendLimit,jdbcType=DECIMAL},
      dividend_status = #{record.dividendStatus,jdbcType=VARCHAR},
      mgmt_fee = #{record.mgmtFee,jdbcType=DECIMAL},
      create_id = #{record.createId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_id = #{record.updateId,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.distribution.dao.dividend.model.Dividend" >
    update dividend
    <set >
      <if test="memberId != null" >
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=BIGINT},
      </if>
      <if test="orderAmount != null" >
        order_amount = #{orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="dividendCount != null" >
        dividend_count = #{dividendCount,jdbcType=INTEGER},
      </if>
      <if test="receivedAmount != null" >
        received_amount = #{receivedAmount,jdbcType=DECIMAL},
      </if>
      <if test="remainAmount != null" >
        remain_amount = #{remainAmount,jdbcType=DECIMAL},
      </if>
      <if test="dividendLimit != null" >
        dividend_limit = #{dividendLimit,jdbcType=DECIMAL},
      </if>
      <if test="dividendStatus != null" >
        dividend_status = #{dividendStatus,jdbcType=VARCHAR},
      </if>
      <if test="mgmtFee != null" >
        mgmt_fee = #{mgmtFee,jdbcType=DECIMAL},
      </if>
      <if test="createId != null" >
        create_id = #{createId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateId != null" >
        update_id = #{updateId,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.distribution.dao.dividend.model.Dividend" >
    update dividend
    set member_id = #{memberId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=INTEGER},
      order_no = #{orderNo,jdbcType=BIGINT},
      order_amount = #{orderAmount,jdbcType=DECIMAL},
      dividend_count = #{dividendCount,jdbcType=INTEGER},
      received_amount = #{receivedAmount,jdbcType=DECIMAL},
      remain_amount = #{remainAmount,jdbcType=DECIMAL},
      dividend_limit = #{dividendLimit,jdbcType=DECIMAL},
      dividend_status = #{dividendStatus,jdbcType=VARCHAR},
      mgmt_fee = #{mgmtFee,jdbcType=DECIMAL},
      create_id = #{createId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_id = #{updateId,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>