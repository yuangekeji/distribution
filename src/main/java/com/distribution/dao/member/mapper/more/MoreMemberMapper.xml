<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.distribution.dao.member.mapper.more.MoreMemberMapper" >
  <resultMap id="BaseResultMap" type="com.distribution.dao.member.model.more.MoreMember" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="member_phone" property="memberPhone" jdbcType="VARCHAR" />
    <result column="login_password" property="loginPassword" jdbcType="VARCHAR" />
    <result column="query_password" property="queryPassword" jdbcType="VARCHAR" />
    <result column="pay_password" property="payPassword" jdbcType="VARCHAR" />
    <result column="recommend_id" property="recommendId" jdbcType="INTEGER" />
    <result column="node_id" property="nodeId" jdbcType="INTEGER" />
    <result column="member_name" property="memberName" jdbcType="VARCHAR" />
    <result column="member_level" property="memberLevel" jdbcType="VARCHAR" />
    <result column="ID_number" property="idNumber" jdbcType="VARCHAR" />
    <result column="express_address" property="expressAddress" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="delete_flag" property="deleteFlag" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="member_post" property="memberPost" jdbcType="VARCHAR" />
    <result column="create_id" property="createId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_id" property="updateId" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="order_amount" property="orderAmount" jdbcType="DECIMAL" />
    <result column="consignee" property="consignee" jdbcType="VARCHAR" />
    <result column="money_status" property="moneyStatus" jdbcType="VARCHAR" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="bank_user_name" property="bankUserName" jdbcType="VARCHAR" />
    <result column="card_number" property="cardNumber" jdbcType="VARCHAR" />
    <result column="is_operator" property="isOperator" jdbcType="VARCHAR" />
    <result column="is_sales_dept" property="isSalesDept" jdbcType="VARCHAR" />
    <result column="first_agent_cnt" property="firstAgentCnt" jdbcType="INTEGER" />
    <result column="recommend_name" property="recommendName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="parentMemberName" property="parentMemberName" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, member_phone, login_password, query_password, pay_password, recommend_id, node_id,
    member_name, member_level, ID_number, express_address, status, delete_flag, role_id,
    member_post, create_id, create_time, update_id, update_time, order_amount, consignee,
    money_status, bank_name, bank_user_name, card_number, is_operator, is_sales_dept,
    first_agent_cnt, recommend_name, parent_id
  </sql>

   <sql id="where">
     <where>
       <if test="parameterMap.phone!=null and parameterMap.phone!=''">
         AND m.member_phone LIKE concat('%',concat('*',LTrim(RTrim(#{parameterMap.phone}))),'%') ESCAPE '*'
       </if>
       <if test="parameterMap.status!=null and parameterMap.status!=''">
         AND m.status = #{parameterMap.status}
       </if>
       <if test="parameterMap.startTime != null and parameterMap.startTime != ''">
         <![CDATA[AND DATE_FORMAT(m.create_time, '%Y-%m-%d') >= #{parameterMap.startTime}]]>
       </if>
       <if test="parameterMap.endTime != null and parameterMap.endTime != ''">
         <![CDATA[AND DATE_FORMAT(m.create_time, '%Y-%m-%d') <= #{parameterMap.endTime}]]>
       </if>
       <if test="parameterMap.recommendId!=null and parameterMap.recommendId!=''">
         AND m.recommend_id = #{parameterMap.recommendId}
       </if>
       <if test="(parameterMap.recommendId!=null or parameterMap.recommendId!='') and parameterMap.memberId!=null and parameterMap.memberId!=''">
         AND (m.create_id = #{parameterMap.memberId} OR m.recommend_id = #{parameterMap.memberId})
       </if>

       <if test="parameterMap.name!=null and parameterMap.name!=''">
         AND m.member_name LIKE concat('%',concat('*',LTrim(RTrim(#{parameterMap.name}))),'%') ESCAPE '*'
       </if>
       <if test="parameterMap.post!=null and parameterMap.post!=''">
         AND m.member_post = #{parameterMap.post}
       </if>
       <if test="parameterMap.level!=null and parameterMap.level!=''">
         AND m.member_level = #{parameterMap.level}
       </if>
         AND p.id = m.parent_id
     </where>
   </sql>

  <sql id="pageLimit">
    <if test="pageSize!=null">
      <if test="offset!=null">
        LIMIT #{pageSize} OFFSET #{offset}
      </if>
    </if>
  </sql>

  <select id="login" parameterType="java.util.Map" resultMap="BaseResultMap">
    SELECT id, member_phone, recommend_id, node_id,
    member_name, member_level, express_address, status, role_id,
    member_post, create_time, order_amount, consignee,
    money_status, is_operator, is_sales_dept,
    first_agent_cnt, recommend_name FROM member WHERE member_phone = #{userName} AND login_password = #{password}
  </select>
  <select id="findMatchMemberQueryPwd" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT count(0) as count
    FROM member
    WHERE id = #{memberId}
    AND member_phone = #{memberPhone}
    AND pay_password = #{payPassword}
  </select>
  <select id="getMemberByPhone" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/> FROM member WHERE member_phone = #{phone}
  </select>

  <select id="getMemberCount" parameterType="com.distribution.common.utils.Page" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM member m  , member p <include refid="where"/>
  </select>
  
  <select id="list" parameterType="com.distribution.common.utils.Page" resultMap="BaseResultMap">
    SELECT
      m.id, m.member_phone, m.recommend_id, m.node_id,
      m.member_name, m.member_level, m.express_address, m.status, m.role_id,
      m.member_post, m.create_time, m.order_amount, m.consignee,
      m.money_status, m.is_operator, m.is_sales_dept,
      m.first_agent_cnt, m.recommend_name ,
      p.member_name as parentMemberName
    FROM member m , member p
  <include refid="where"/>ORDER BY m.id DESC <include refid="pageLimit"/>
  </select>
  <update id="updateMemberMoneyStatusY" parameterType="java.lang.Integer">
       update member
       set   money_status = 'Y'
       where id = #{memberId}
  </update>


  <insert id="insert" parameterType="com.distribution.dao.member.model.Member" useGeneratedKeys="true" keyProperty="id">
    insert into member (id, member_phone, login_password,
      query_password, pay_password, recommend_id,
      node_id, member_name, member_level,
      ID_number, express_address, status,
      delete_flag, role_id, member_post,
      create_id, create_time, update_id,
      update_time, order_amount, consignee,
      money_status, bank_name, bank_user_name,
      card_number, is_operator, is_sales_dept,
      first_agent_cnt, recommend_name, linkman_phone,
      parent_id)
    values (#{id,jdbcType=INTEGER}, #{memberPhone,jdbcType=VARCHAR}, #{loginPassword,jdbcType=VARCHAR},
      #{queryPassword,jdbcType=VARCHAR}, #{payPassword,jdbcType=VARCHAR}, #{recommendId,jdbcType=INTEGER},
      #{nodeId,jdbcType=INTEGER}, #{memberName,jdbcType=VARCHAR}, #{memberLevel,jdbcType=VARCHAR},
      #{idNumber,jdbcType=VARCHAR}, #{expressAddress,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR},
      #{deleteFlag,jdbcType=VARCHAR}, #{roleId,jdbcType=INTEGER}, #{memberPost,jdbcType=VARCHAR},
      #{createId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateId,jdbcType=INTEGER},
      #{updateTime,jdbcType=TIMESTAMP}, #{orderAmount,jdbcType=DECIMAL}, #{consignee,jdbcType=VARCHAR},
      #{moneyStatus,jdbcType=VARCHAR}, #{bankName,jdbcType=VARCHAR}, #{bankUserName,jdbcType=VARCHAR},
      #{cardNumber,jdbcType=VARCHAR}, #{isOperator,jdbcType=VARCHAR}, #{isSalesDept,jdbcType=VARCHAR},
      #{firstAgentCnt,jdbcType=INTEGER}, #{recommendName,jdbcType=VARCHAR}, #{linkmanPhone,jdbcType=VARCHAR},
      #{parentId,jdbcType=INTEGER})
  </insert>
  
  <select id="getPostLevel6Member" parameterType="com.distribution.common.utils.Page" resultMap="BaseResultMap">
    select
      id, member_name, member_post
    from member
    where member_post = 'post_level6'
  </select>
  <update id="updateMemberPostLevelBatch" parameterType="java.util.Map"  >
    update member
    set
      member_post = #{memberPost,jdbcType=VARCHAR},
      update_id = #{updateId,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id in
    <foreach collection="memberIds" index="index" item="item" open="(" separator="," close=")">
     #{item}
     </foreach>
  </update>
  <update id="updateMemberSalesDept" parameterType="java.lang.Integer">
    update member
    set is_sales_dept ='Y',
         update_time = now(),
         update_id = #{memberId}
    where id = #{memberId}
  </update>


  <select id="checkLoginPwd" parameterType="com.distribution.dao.member.model.more.MoreMember" resultMap="BaseResultMap">
    SELECT id,login_password FROM member WHERE id = #{id} AND login_password = #{oldLoginPwd}
  </select>
  <select id="checkQueryPwd" parameterType="com.distribution.dao.member.model.more.MoreMember" resultMap="BaseResultMap">
    SELECT id,query_password FROM member WHERE id = #{id} AND query_password = #{oldQueryPwd}
  </select>
  <select id="checkPayPwd" parameterType="com.distribution.dao.member.model.more.MoreMember" resultMap="BaseResultMap">
    SELECT id,pay_password FROM member WHERE id = #{id} AND pay_password = #{oldPayPwd}
  </select>
</mapper>