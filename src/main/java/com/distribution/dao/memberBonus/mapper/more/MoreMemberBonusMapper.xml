<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.distribution.dao.memberBonus.mapper.more.MoreMemberBonusMapper" >
  <resultMap id="BaseResultMap" type="com.distribution.dao.memberBonus.model.MemberBonus" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="bonus_date" property="bonusDate" jdbcType="TIMESTAMP" />
    <result column="bonus_type" property="bonusType" jdbcType="VARCHAR" />
    <result column="amout" property="amout" jdbcType="DOUBLE" />
    <result column="manage_fee" property="manageFee" jdbcType="DOUBLE" />
    <result column="actual_amout" property="actualAmout" jdbcType="DOUBLE" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="order_no" property="orderNo" jdbcType="INTEGER" />
    <result column="remarks" property="remarks" jdbcType="VARCHAR" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="MemberBonusListResultMap" type="com.distribution.dao.memberBonus.model.more.MoreMemberBonus" >
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="member_name" property="memberName" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="order_no" property="orderNo" jdbcType="INTEGER" />
    <result column="recommend_id" property="recommendId" jdbcType="INTEGER" />
    <result column="recommend_name" property="recommendName" jdbcType="VARCHAR" />
    <result column="order_amount" property="orderAmount" jdbcType="DOUBLE" />
    <result column="amout_total" property="amoutTotal" jdbcType="DOUBLE" />
    <result column="manage_fee_total" property="manageFeeTotal" jdbcType="DOUBLE" />
    <result column="actual_amout_total" property="actualAmoutTotal" jdbcType="DOUBLE" />
    <result column="bonus_first_agent_amout" property="bonusFirstAgentAmout" jdbcType="DOUBLE" />
    <result column="bonus_second_agent_amout" property="bonusSecondAgentAmout" jdbcType="DOUBLE" />
    <result column="bonus_dividend_amout" property="bonusDividendAmout" jdbcType="DOUBLE" />
    <result column="bonus_point_amout" property="bonusPointAmout" jdbcType="DOUBLE" />
    <result column="bonus_graded_amout" property="bonusGradedAmout" jdbcType="DOUBLE" />
    <result column="bonus_workroom_amout" property="bonusWorkroomAmout" jdbcType="DOUBLE" />
    <result column="bonus_workcenter_amout" property="bonusWorkcenterAmout" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, member_id, bonus_date, bonus_type, amout, manage_fee, actual_amout,
    order_id, order_no, remarks, create_by, create_date, update_by, update_time
  </sql>
  <sql id="where">
    <where>
        AND member_id = #{parameterMap.memberId}
        AND order_id = #{parameterMap.orderId}
        AND bonus_type = '3'
    </where>
  </sql>
  <sql id="pageLimit">
    <if test="pageSize!=null">
      <if test="offset!=null">
        LIMIT #{pageSize} OFFSET #{offset}
      </if>
    </if>
  </sql>
  <select id="getDividendDetails" resultMap="BaseResultMap" parameterType="com.distribution.common.utils.Page" >
    select
    <include refid="Base_Column_List" />
    from member_bonus
    <include refid="where"/>
    order by bonus_date desc
    <include refid="pageLimit"/>

  </select>
  <select id="getDividendDetailsCount" resultType="java.lang.Integer" parameterType="com.distribution.common.utils.Page" >
    select
    count(0) as count
    from member_bonus
    <include refid="where"/>
  </select>
  <sql id="whereMemberBonusList">
    <where>
      <if test="parameterMap.memberId!=null and parameterMap.memberId!=''">
         and member_id = #{parameterMap.memberId}
      </if>
      <if test="parameterMap.bonusStartDate!=null and parameterMap.bonusStartDate!=''">
          and DATE_FORMAT(bonus_date,'%Y%m%d') &gt;= DATE_FORMAT(#{parameterMap.bonusStartDate},'%Y%m%d')
      </if>
      <if test="parameterMap.bonusEndDate!=null and parameterMap.bonusEndDate!=''">
          and DATE_FORMAT(bonus_date,'%Y%m%d') &lt;= DATE_FORMAT(#{parameterMap.bonusEndDate},'%Y%m%d')
      </if>
    </where>
  </sql>
  <select id="selectMemberBonusList" resultMap="MemberBonusListResultMap" parameterType="com.distribution.common.utils.Page" >
      select
          mb.member_id,
          member.member_name,
          mb.order_id,
          mb.order_no,
          member.recommend_id,
          member.recommend_name,
          member.order_amount,
          mb.amout_total,
          mb.manage_fee_total,
          mb.actual_amout_total,
          mb.bonus_first_agent_amout,
          mb.bonus_second_agent_amout,
          mb.bonus_dividend_amout,
          mb.bonus_point_amout,
          mb.bonus_graded_amout,
          mb.bonus_workroom_amout,
          mb.bonus_workcenter_amout
      from (
          select
          member_id,
          order_id,
          order_no,
          sum(amout_total) amout_total,
          sum(manage_fee_total) manage_fee_total,
          sum(actual_amout_total) actual_amout_total,
          max(case bonus_type when '1' then actual_amout_total else 0 end) bonus_first_agent_amout,
          max(case bonus_type when '2' then actual_amout_total else 0 end) bonus_second_agent_amout,
          max(case bonus_type when '3' then actual_amout_total else 0 end) bonus_dividend_amout,
          max(case bonus_type when '4' then actual_amout_total else 0 end) bonus_point_amout,
          max(case bonus_type when '5' then actual_amout_total else 0 end) bonus_graded_amout,
          max(case bonus_type when '7' then actual_amout_total else 0 end) bonus_workroom_amout,
          max(case bonus_type when '8' then actual_amout_total else 0 end) bonus_workcenter_amout
          from(select
                  member_id,
                  order_id,
                  order_no,
                  bonus_type,
                  sum(amout) as amout_total,
                  sum(manage_fee) as manage_fee_total,
                  sum(actual_amout) as actual_amout_total
              from member_bonus
              <include refid="whereMemberBonusList"/>
              <if test="parameterMap.orderNo!=null and parameterMap.orderNo!=''">
                  and order_no = #{parameterMap.orderNo}
              </if>
              and   bonus_type not in ('6')
              group by member_id, order_id, order_no,bonus_type) temp
          group by member_id, order_id, order_no
      <if test="parameterMap.chinaPresidentBonusYN==1">
          union all
          select
          member_id,
          order_id,
          order_no,
          sum(amout) as amout_total,
          sum(manage_fee) as manage_fee_total,
          sum(actual_amout) as actual_amout_total,
          0 bonus_first_agent_amout,
          0 bonus_second_agent_amout,
          0 bonus_dividend_amout,
          0 bonus_point_amout,
          0 bonus_graded_amout,
          0 bonus_workroom_amout,
          0 bonus_workcenter_amout
          from member_bonus
          <include refid="whereMemberBonusList"/>
          and   bonus_type = '6'
          group by member_id, order_id, order_no
      </if>
      ) mb, member member
      where mb.member_id = member.id
      order by mb.order_id
    <include refid="pageLimit"/>
  </select>
  <select id="selectMemberBonusListCount" resultType="java.lang.Integer" parameterType="com.distribution.common.utils.Page" >
    select
        count(0) as count
    from (
      select
      member_id,
      order_id,
      order_no
      from member_bonus
      <include refid="whereMemberBonusList"/>
      <if test="parameterMap.orderNo!=null and parameterMap.orderNo!=''">
          and order_no = #{parameterMap.orderNo}
      </if>
      and   bonus_type not in ('6')
      group by member_id, order_id, order_no
      <if test="parameterMap.chinaPresidentBonusYN==1">
          union all
          select
          member_id,
          order_id,
          order_no
          from member_bonus
          <include refid="whereMemberBonusList"/>
          and   bonus_type = '6'
          group by member_id, order_id, order_no
      </if>
      ) mb, member member
      where mb.member_id = member.id
  </select>
</mapper>