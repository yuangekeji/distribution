<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.distribution.dao.memberNode.mapper.more.MoreMemberNodeMapper" >
  <resultMap id="BaseResultMap" type="com.distribution.dao.memberNode.model.MemberNode" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="left_id" property="leftId" jdbcType="INTEGER" />
    <result column="right_id" property="rightId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
    <result column="member_total" property="memberTotal" jdbcType="INTEGER" />
    <result column="sales_total" property="salesTotal" jdbcType="DOUBLE" />
  </resultMap>
  <resultMap id="MoreResultMap" type="com.distribution.dao.memberNode.model.more.MoreMemberNode" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="left_id" property="leftId" jdbcType="INTEGER" />
    <result column="right_id" property="rightId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
    <result column="member_total" property="memberTotal" jdbcType="INTEGER" />
    <result column="sales_total" property="salesTotal" jdbcType="DOUBLE" />
    
    <result column="member_phone" property="memberPhone" jdbcType="VARCHAR" />
    <result column="member_name" property="memberName" jdbcType="VARCHAR" />
    <result column="order_amount" property="orderAmount" jdbcType="DECIMAL" />
    
    <result column="rownum" property="rownum" jdbcType="INTEGER" />
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="first_agent_cnt" property="firstAgentCnt" jdbcType="INTEGER" />
    
    <result column="member_level" property="memberLevel" jdbcType="VARCHAR" />
    <result column="left_level" property="leftLevel" jdbcType="VARCHAR" />
    <result column="right_level" property="rightLevel" jdbcType="VARCHAR" />
    <result column="member_post" property="memberPost" jdbcType="VARCHAR" />
    <result column="is_operator" property="isOperator" jdbcType="VARCHAR" />
    <result column="is_sales_dept" property="isSalesDept" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, left_id, right_id, parent_id, create_time, create_by, update_time, update_by, 
    member_total, sales_total
  </sql>
  
  <insert id="insertBackId" useGeneratedKeys="true" keyProperty="id" parameterType="com.distribution.dao.memberNode.model.MemberNode" >
    insert into member_node (left_id, right_id, 
      parent_id, create_time, create_by, 
      update_time, update_by, member_total, 
      sales_total)
    values (#{leftId,jdbcType=INTEGER}, #{rightId,jdbcType=INTEGER}, 
      #{parentId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{memberTotal,jdbcType=INTEGER}, 
      #{salesTotal,jdbcType=DOUBLE})
  </insert>
  <select id="findParentNodes" resultMap="BaseResultMap" parameterType="java.lang.Integer">
  		select id from member_node
		where find_in_set(id,getParentList(#{id}))
		order by id desc
  </select>
  <select id="findTotalSalesByParentId" resultType="java.lang.Double" parameterType="java.lang.Integer">
  		select sum(o.order_amt) as total_sales from member m
		left join order_master o on m.id = o.member_id
		where find_in_set(m.node_id,getChildList(#{parentId})) and (o.order_category = 1 or o.order_category = 2)
  </select>
  <select id="listParentNodesWhichHasTwoSubNodes" resultMap="MoreResultMap" parameterType="map">
  		SELECT tep.*,
  			rt.member_post as right_level,
  			lt.member_post as left_level
		from 
		(
			SELECT 
				m.id as member_id,
				m.node_id as id,
				n.left_id,
				n.right_id
			from member m
			LEFT JOIN member_node n on m.node_id = n.id
			where FIND_IN_SET(node_id,getParentList(#{nodeId})) 
			and member_post = #{fromLevel}
			and n.left_id > 0
			and n.right_id > 0
			order by node_id desc
		)tep
		LEFT JOIN member lt on lt.node_id = tep.left_id
		LEFT JOIN member rt on rt.node_id = tep.right_id
  </select>
  <select id="listParentIsManageLevelNodes" resultMap="MoreResultMap" parameterType="java.lang.Integer">
  		select max(id) as member_id,member_post
		from 
		(select m.id,m.member_post
		from member m
		where FIND_IN_SET(node_id,getParentList(#{nodeId}))
		order by node_id desc)tem
		group by member_post
  </select>
  <select id="listSubNodes" resultMap="MoreResultMap" parameterType="java.lang.Integer">
  		select 
			n.id,
			n.left_id,
			n.right_id,
			n.create_time,
			m.member_name,
			m.member_phone,
			m.order_amount
		from member_node n
		left join member m 
		on n.id = m.node_id
		where FIND_IN_SET(n.id,getChildList(#{nodeId}))
		order by n.id asc
  </select>
  <select id="listParentNodesWithMemberInfo" resultMap="MoreResultMap" parameterType="java.lang.Integer">
  		set @rownum=-1;
		select @rownum:=@rownum+1 as rownum,
		m.id as member_id,
		m.node_id as id,
		m.first_agent_cnt,
		m.is_operator,
		m.is_sales_dept
		from member m
		where find_in_set(m.node_id,getParentList(#{nodeId}))
		order by m.node_id desc
  </select>
  <update id="updateParentLevel" parameterType="map">
  		update member 
  		set member_post = #{toLevel}
		where member_post = #{fromLevel} 
		and node_id in 
        <foreach collection="list" item="ids" index="index" open="(" close=")" separator=",">
		  #{ids.id}
		</foreach>
  </update>
  
</mapper>