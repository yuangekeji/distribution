<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.distribution.dao.nodeBonusHistory.mapper.NodeBonusHistoryMapper" >
  <resultMap id="BaseResultMap" type="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistory" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="mebmer_id" property="mebmerId" jdbcType="INTEGER" />
    <result column="bonus_amount" property="bonusAmount" jdbcType="DOUBLE" />
    <result column="from_node_id" property="fromNodeId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="order_no" property="orderNo" jdbcType="BIGINT" />
    <result column="order_date" property="orderDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, mebmer_id, bonus_amount, from_node_id, status, create_time, create_by, update_time, 
    update_by, order_id, order_no, order_date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistoryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from node_bonus_history
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from node_bonus_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from node_bonus_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistoryExample" >
    delete from node_bonus_history
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistory" >
    insert into node_bonus_history (id, mebmer_id, bonus_amount, 
      from_node_id, status, create_time, 
      create_by, update_time, update_by, 
      order_id, order_no, order_date
      )
    values (#{id,jdbcType=INTEGER}, #{mebmerId,jdbcType=INTEGER}, #{bonusAmount,jdbcType=DOUBLE}, 
      #{fromNodeId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=INTEGER}, 
      #{orderId,jdbcType=INTEGER}, #{orderNo,jdbcType=BIGINT}, #{orderDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistory" >
    insert into node_bonus_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="mebmerId != null" >
        mebmer_id,
      </if>
      <if test="bonusAmount != null" >
        bonus_amount,
      </if>
      <if test="fromNodeId != null" >
        from_node_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateBy != null" >
        update_by,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="orderDate != null" >
        order_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="mebmerId != null" >
        #{mebmerId,jdbcType=INTEGER},
      </if>
      <if test="bonusAmount != null" >
        #{bonusAmount,jdbcType=DOUBLE},
      </if>
      <if test="fromNodeId != null" >
        #{fromNodeId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null" >
        #{orderNo,jdbcType=BIGINT},
      </if>
      <if test="orderDate != null" >
        #{orderDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistoryExample" resultType="java.lang.Integer" >
    select count(*) from node_bonus_history
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update node_bonus_history
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.mebmerId != null" >
        mebmer_id = #{record.mebmerId,jdbcType=INTEGER},
      </if>
      <if test="record.bonusAmount != null" >
        bonus_amount = #{record.bonusAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.fromNodeId != null" >
        from_node_id = #{record.fromNodeId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null" >
        order_no = #{record.orderNo,jdbcType=BIGINT},
      </if>
      <if test="record.orderDate != null" >
        order_date = #{record.orderDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update node_bonus_history
    set id = #{record.id,jdbcType=INTEGER},
      mebmer_id = #{record.mebmerId,jdbcType=INTEGER},
      bonus_amount = #{record.bonusAmount,jdbcType=DOUBLE},
      from_node_id = #{record.fromNodeId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=BIGINT},
      order_date = #{record.orderDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistory" >
    update node_bonus_history
    <set >
      <if test="mebmerId != null" >
        mebmer_id = #{mebmerId,jdbcType=INTEGER},
      </if>
      <if test="bonusAmount != null" >
        bonus_amount = #{bonusAmount,jdbcType=DOUBLE},
      </if>
      <if test="fromNodeId != null" >
        from_node_id = #{fromNodeId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=BIGINT},
      </if>
      <if test="orderDate != null" >
        order_date = #{orderDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.distribution.dao.nodeBonusHistory.model.NodeBonusHistory" >
    update node_bonus_history
    set mebmer_id = #{mebmerId,jdbcType=INTEGER},
      bonus_amount = #{bonusAmount,jdbcType=DOUBLE},
      from_node_id = #{fromNodeId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=INTEGER},
      order_no = #{orderNo,jdbcType=BIGINT},
      order_date = #{orderDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>