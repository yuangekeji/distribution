<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	   default-autowire="byName" default-lazy-init="false">

	 <!--data source for dbadmin -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">

	<property name="driverClassName" value="${jdbc.driverClassName}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
	<!--maxActive: 最大连接数量-->
	<property name="maxActive" value="150"/>
	<!--minIdle: 最小空闲连接-->
	<property name="minIdle" value="5"/>
	<!--maxIdle: 最大空闲连接-->
	<property name="maxIdle" value="20"/>
	<!--initialSize: 初始化连接-->
	<property name="initialSize" value="30"/>
	<!-- 连接被泄露时是否打印 -->
	<property name="logAbandoned" value="true"/>
	<!--removeAbandoned: 是否自动回收超时连接-->
	<property name="removeAbandoned"  value="true"/>
	<!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
	<property name="removeAbandonedTimeout" value="5"/>
	<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
	<property name="maxWait" value="100"/>
	<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
	<property name="timeBetweenEvictionRunsMillis" value="10000"/>
	<!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
	<property name="numTestsPerEvictionRun" value="10"/>
	<!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
	<property name="minEvictableIdleTimeMillis" value="10000"/>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
				  value="com.distribution.dao.*.mapper,com.distribution.dao.*.mapper.more" />
		<property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory" />
	</bean>

	<!-- 事物管理 -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--
	propagation属性说明:
	REQUIRED		：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
	SUPPORTS		：支持当前事务，如果当前没有事务，就以非事务方式执行。
	MANDATORY		：支持当前事务，如果当前没有事务，就抛出异常。
	REQUIRES_NEW	：新建事务，如果当前存在事务，把当前事务挂起。
	NOT_SUPPORTED	：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	NEVER			：以非事务方式执行，如果当前存在事务，则抛出异常。
	NESTED			：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。
	-->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
		<tx:attributes>
			<tx:method name="delete*"      propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*"      propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*"      propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="add*"         propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="save*"        propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="create*"      propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="set*"         propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="business*"    propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="find*"        propagation="SUPPORTS" />
			<tx:method name="select*"        propagation="SUPPORTS" />
			<!--<tx:method name="find*"   	   propagation="SUPPORTS" />-->
			<!--<tx:method name="*" read-only="true" />-->
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="pc" expression="execution(* com.distribution.service..*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>

</beans>